# Builds on all branches & PRs
# Deploys to PyPi on "release".
name: Build, test and publish

on: [push, pull_request]

jobs:
  typechecks:
    runs-on: ubuntu-latest
    name: Type checks
    strategy:
      max-parallel: 5
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - uses: theCapypara/mypy-check@rust-support
      name: Run type checks
      with:
        python_version: '${{ matrix.python-version }}'
        requirements: '-r mypy-requirements.txt'

  code-formatting:
    runs-on: ubuntu-latest
    name: Code Format Check
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: psf/black@stable
        with:
          options: "--check -t py38"
          src: tilequant

  import-check:
    runs-on: ubuntu-latest
    name: Check unused imports
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pycln
        pip install -e .
    - name: Analysing the code with pycln
      run: pycln tilequant -c -a
  build:
    runs-on: ${{ matrix.os }}
    name: Build Wheels
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          # very slow:
          #- os: ubuntu-latest
          #  arch: arm64
          - os: macos-11
            arch: x86_64
          - os: macos-11
            arch: arm64
          - os: windows-2019
            arch: x86
          - os: windows-2019
            arch: AMD64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        shell: bash
        run: |
          perl -i -pe "s/version\s*=\s*\"(.*?)(\.rc.*|\.a.*|\.post.*)?\"/version=\"\1.dev0+${GITHUB_SHA::8}\"/" pyproject.toml
      - name: Note version (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "PACKAGE_VERSION=$(tomlq '.project.version' pyproject.toml -r)" >> $GITHUB_ENV
      - name: Note version (Windows)
        if: matrix.os == 'windows-2019'
        run: |
          $env:path = "C:\pipx_bin;" + $env:path
          
          pipx install yq
          $env:PACKAGE_VERSION = tomlq.exe '.project.version' pyproject.toml -r
          echo "PACKAGE_VERSION=$env:PACKAGE_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Note version (MacOS)
        if: matrix.os == 'macos-11'
        run: |
          python3 -m venv .yq-venv
          . .yq-venv/bin/activate
          pip install yq
          echo "PACKAGE_VERSION=$(tomlq '.project.version' pyproject.toml -r)" >> $GITHUB_ENV

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD_LINUX: "${{ matrix.pythonver }}-manylinux*"
          CIBW_ARCHS: ${{ matrix.arch }}
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.whl

  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    name: Deploy wheels to PyPI
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
          pip install twine
      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload wheels/*.whl